import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Language, Translations } from '../types';

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
  languages: Language[];
}

const languages: Language[] = [
  { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'hi', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'pa', name: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│' },
];

const translations: Translations = {
  en: {
    home: 'Home',
    services: 'Services',
    doctors: 'Doctors',
    about: 'About',
    contact: 'Contact',
    login: 'Login',
    doctorLogin: 'Doctor Login',
    patientLogin: 'Patient Login',
    pharmacyLogin: 'Pharmacy Login',
    bookAppointment: 'Book Appointment',
    videoConsultation: 'Video Consultation',
    findNearbyHospitals: 'Find Nearby Hospitals',
    sarthiBooth: 'Find Sarthi Booth',
    welcome: 'Welcome to Sarthi Healthcare',
    tagline: 'Your Health, Our Priority - Advanced Healthcare Solutions',
    emergencyServices: 'Emergency Services',
    onlineConsultation: 'Online Consultation',
    labTests: 'Lab Tests',
    pharmacy: 'Pharmacy',
    healthCheckup: 'Health Checkup',
    insurance: 'Insurance',
    askSarthi: 'Ask Sarthi AI',
    chatbotPlaceholder: 'Type your health question here...',
    send: 'Send',
    microphoneTooltip: 'Click to speak',
    imageUploadTooltip: 'Upload image for analysis',
  },
  hi: {
    home: 'рд╣реЛрдо',
    services: 'рд╕реЗрд╡рд╛рдПрдВ',
    doctors: 'рдбреЙрдХреНрдЯрд░',
    about: 'рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ',
    contact: 'рд╕рдВрдкрд░реНрдХ',
    login: 'рд▓реЙрдЧрд┐рди',
    doctorLogin: 'рдбреЙрдХреНрдЯрд░ рд▓реЙрдЧрд┐рди',
    patientLogin: 'рдорд░реАрдЬрд╝ рд▓реЙрдЧрд┐рди',
    pharmacyLogin: 'рдлрд╛рд░реНрдореЗрд╕реА рд▓реЙрдЧрд┐рди',
    bookAppointment: 'рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдмреБрдХ рдХрд░реЗрдВ',
    videoConsultation: 'рд╡реАрдбрд┐рдпреЛ рдкрд░рд╛рдорд░реНрд╢',
    findNearbyHospitals: 'рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬреЗрдВ',
    sarthiBooth: 'рд╕рд╛рд░рдереА рдмреВрде рдЦреЛрдЬреЗрдВ',
    welcome: 'рд╕рд╛рд░рдереА рд╣реЗрд▓реНрдердХреЗрдпрд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
    tagline: 'рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп, рд╣рдорд╛рд░реА рдкреНрд░рд╛рдердорд┐рдХрддрд╛ - рдЙрдиреНрдирдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╛рдзрд╛рди',
    emergencyServices: 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдПрдВ',
    onlineConsultation: 'рдСрдирд▓рд╛рдЗрди рдкрд░рд╛рдорд░реНрд╢',
    labTests: 'рд▓реИрдм рдЯреЗрд╕реНрдЯ',
    pharmacy: 'рдлрд╛рд░реНрдореЗрд╕реА',
    healthCheckup: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдВрдЪ',
    insurance: 'рдмреАрдорд╛',
    askSarthi: 'рд╕рд╛рд░рдереА AI рд╕реЗ рдкреВрдЫреЗрдВ',
    chatbotPlaceholder: 'рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ...',
    send: 'рднреЗрдЬреЗрдВ',
    microphoneTooltip: 'рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ',
    imageUploadTooltip: 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд▓рд┐рдП рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
  },
  pa: {
    home: 'риШри░',
    services: 'ри╕рйЗри╡ри╛ри╡ри╛риВ',
    doctors: 'рибри╛риХриЯри░',
    about: 'римри╛ри░рйЗ',
    contact: 'ри╕рй░рикри░риХ',
    login: 'ри▓ри╛риЧриЗрии',
    doctorLogin: 'рибри╛риХриЯри░ ри▓ри╛риЧриЗрии',
    patientLogin: 'риори░рйАриЬри╝ ри▓ри╛риЧриЗрии',
    pharmacyLogin: 'рилри╛ри░риорйЗри╕рйА ри▓ри╛риЧриЗрии',
    bookAppointment: 'риорйБри▓ри╛риХри╛рид римрйБрй▒риХ риХри░рйЛ',
    videoConsultation: 'ри╡рйАрибрйАриУ ри╕ри▓ри╛ри╣',
    findNearbyHospitals: 'риирйЗрйЬри▓рйЗ ри╣ри╕рикридри╛ри▓ ри▓рй▒ринрйЛ',
    sarthiBooth: 'ри╕ри╛ри░риерйА римрйВрие ри▓рй▒ринрйЛ',
    welcome: 'ри╕ри╛ри░риерйА ри╣рйИри▓риериХрйЗриЕри░ ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕ри╡ри╛риЧрид ри╣рйИ',
    tagline: 'ридрйБри╣ри╛рибрйА ри╕ри┐ри╣рид, ри╕ри╛рибрйА ридри░риЬрйАри╣ - риЙрй▒риирид ри╕ри┐ри╣рид ри╣рй▒ри▓',
    emergencyServices: 'риРриори░риЬрйИриВри╕рйА ри╕рйЗри╡ри╛ри╡ри╛риВ',
    onlineConsultation: 'риФриири▓ри╛риИрии ри╕ри▓ри╛ри╣',
    labTests: 'ри▓рйИрим риЯрйИри╕риЯ',
    pharmacy: 'рилри╛ри░риорйЗри╕рйА',
    healthCheckup: 'ри╕ри┐ри╣рид риЬри╛риВриЪ',
    insurance: 'римрйАриори╛',
    askSarthi: 'ри╕ри╛ри░риерйА AI ридрйЛриВ рикрйБрй▒риЫрйЛ',
    chatbotPlaceholder: 'риЗрй▒риерйЗ риЖрикригри╛ ри╕ри┐ри╣рид ри╕ри╡ри╛ри▓ риЯри╛риИрик риХри░рйЛ...',
    send: 'ринрйЗриЬрйЛ',
    microphoneTooltip: 'римрйЛри▓риг ри▓риИ риХри▓ри┐рй▒риХ риХри░рйЛ',
    imageUploadTooltip: 'ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ри▓риИ риЪри┐рй▒ридри░ риЕрикри▓рйЛриб риХри░рйЛ',
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(languages[0]);

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
  };

  const t = (key: string): string => {
    return translations[currentLanguage.code]?.[key] || key;
  };

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, t, languages }}>
      {children}
    </LanguageContext.Provider>
  );
};